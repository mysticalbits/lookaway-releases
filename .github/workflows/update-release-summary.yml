name: Update Release Summary

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-release-summary:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Update Release Summary
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const { owner, repo } = context.repo;
          
          async function getReleaseSummary() {
            const releases = await github.rest.repos.listReleases({ owner, repo });
            return releases.data.map(release => ({
              id: release.id,
              tag_name: release.tag_name,
              published_at: release.published_at
            }));
          }

          async function updateFile(path, content, sha) {
            try {
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path,
                message: 'Update release summary',
                content: Buffer.from(content).toString('base64'),
                sha: sha
              });
              console.log(`${path} updated successfully`);
            } catch (error) {
              console.error(`Error updating ${path}:`, error);
              throw error;
            }
          }

          try {
            const summary = await getReleaseSummary();
            const content = JSON.stringify(summary, null, 2);

            try {
              const file = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'release_summary.json'
              });
              await updateFile('release_summary.json', content, file.data.sha);
            } catch (error) {
              if (error.status === 404) {
                await updateFile('release_summary.json', content);
              } else {
                throw error;
              }
            }
          } catch (error) {
            console.error('Error in workflow:', error);
            core.setFailed(error.message);
          }
